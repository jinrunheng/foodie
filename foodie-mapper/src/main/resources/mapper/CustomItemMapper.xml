<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.mapper.CustomItemMapper">
    <select id="queryItemComments" parameterType="map" resultType="com.github.vo.ItemCommentVO">
        select ic.comment_level as commentLevel,
        ic.content as content,
        ic.spec_name as specName,
        ic.created_time as createdTime,
        u.face as userFace,
        u.nickname as nickname
        from item_comment ic
        left join
        foodie_user u
        on ic.user_id = u.id
        where ic.item_id = #{paramsMap.itemId}
        <if test="paramsMap.level != null and paramsMap.level != ''">
            and ic.comment_level = #{paramsMap.level}
        </if>
    </select>

    <select id="searchItems" parameterType="map" resultType="com.github.vo.SearchItemsVO">
        select i.id as itemId,
        i.item_name as itemName,
        i.sell_counts as sellCounts,
        ii.url as imgUrl,
        tmp.price_discount as price
        from item i
        left join item_img ii
        on i.id = ii.item_id
        left join
        (
        select item_id, MIN(price_discount) as price_discount
        from item_spec
        group by item_id
        ) tmp
        on tmp.item_id = i.id
        where ii.is_main = 1
        <if test="paramsMap.keywords != null and paramsMap.keywords != ''">
            and i.item_name like '%${paramsMap.keywords}%'
        </if>
        order by
        <choose>
            <when test="paramsMap.sort == &quot;c&quot;">
                i.sell_counts desc
            </when>
            <when test="paramsMap.sort == &quot;p&quot;">
                tmp.price_discount asc
            </when>
            <otherwise>
                i.item_name asc
            </otherwise>
        </choose>
    </select>
    <!--k 为默认排序，c 为按照销量从高到低排序，p 为按照价格从低到高排序-->

    <!--通过三级分类查找商品-->
    <select id="searchItemsByThirdCat" parameterType="map" resultType="com.github.vo.SearchItemsVO">
        select i.id as itemId,
        i.item_name as itemName,
        i.sell_counts as sellCounts,
        ii.url as imgUrl,
        tmp.price_discount as price
        from item i
        left join item_img ii
        on i.id = ii.item_id
        left join
        (
        select item_id, MIN(price_discount) as price_discount
        from item_spec
        group by item_id
        ) tmp
        on tmp.item_id = i.id
        where ii.is_main = 1
        and i.cat_id = #{paramsMap.catId}
        order by
        <choose>
            <when test="paramsMap.sort == &quot;c&quot;">
                i.sell_counts desc
            </when>
            <when test="paramsMap.sort == &quot;p&quot;">
                tmp.price_discount asc
            </when>
            <otherwise>
                i.item_name asc
            </otherwise>
        </choose>
    </select>

    <select id="queryItemsBySpecIds" parameterType="list" resultType="com.github.vo.ShopCartVO">
        select t_item.id as itemId,
        t_item.item_name as itemName,
        t_item_img.url as itemImgUrl,
        t_item_spec.id as specId,
        t_item_spec.name as specName,
        t_item_spec.price_discount as priceDiscount,
        t_item_spec.price_normal as priceNormal
        from item_spec t_item_spec
        left join item t_item
        on t_item.id = t_item_spec.item_id
        left join item_img t_item_img
        on t_item_img.item_id = t_item.id
        where t_item_img.is_main = 1
        and t_item_spec.id in
        <foreach collection="paramsList" index="index" item="specId" open="(" separator="," close=")">
            #{specId}
        </foreach>
    </select>
</mapper>