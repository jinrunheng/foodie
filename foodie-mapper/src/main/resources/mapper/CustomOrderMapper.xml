<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.mapper.CustomOrderMapper">

    <resultMap id="BaseResultMap" type="com.github.pojo.Order">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="receiver_name" property="receiverName" jdbcType="VARCHAR"/>
        <result column="receiver_mobile" property="receiverMobile" jdbcType="VARCHAR"/>
        <result column="receiver_address" property="receiverAddress" jdbcType="VARCHAR"/>
        <result column="total_amount" property="totalAmount" jdbcType="INTEGER"/>
        <result column="real_pay_amount" property="realPayAmount" jdbcType="INTEGER"/>
        <result column="post_amount" property="postAmount" jdbcType="INTEGER"/>
        <result column="pay_method" property="payMethod" jdbcType="INTEGER"/>
        <result column="left_msg" property="leftMsg" jdbcType="VARCHAR"/>
        <result column="extand" property="extand" jdbcType="VARCHAR"/>
        <result column="is_comment" property="isComment" jdbcType="INTEGER"/>
        <result column="is_delete" property="isDelete" jdbcType="INTEGER"/>
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="myOrdersVO" type="com.github.vo.MyOrderVO">
        <id column="orderId" property="orderId"/>
        <result column="createdTime" property="createdTime"/>
        <result column="payMethod" property="payMethod"/>
        <result column="realPayAmount" property="realPayAmount"/>
        <result column="postAmount" property="postAmount"/>
        <result column="isComment" property="isComment"/>
        <result column="orderStatus" property="orderStatus"/>
        <collection property="subOrderItemList"
                    select="getSubItems" column="orderId"
                    ofType="com.github.vo.MySubOrderItemVO">
            <result column="itemId" property="itemId"/>
            <result column="itemImg" property="itemImg"/>
            <result column="itemName" property="itemName"/>
            <result column="itemSpecId" property="itemSpecId"/>
            <result column="itemSpecName" property="itemSpecName"/>
            <result column="buyCounts" property="buyCounts"/>
            <result column="price" property="price"/>
        </collection>
    </resultMap>
    <insert id="createOrder" parameterType="com.github.pojo.Order">
        insert into `order`
        (id, user_id, receiver_name, receiver_mobile, receiver_address, total_amount, real_pay_amount, post_amount,
         pay_method, left_msg, extand, is_comment, is_delete, created_time, updated_time)
        values (#{id}, #{userId}, #{receiverName}, #{receiverMobile}, #{receiverAddress}, #{totalAmount},
                #{realPayAmount}, #{postAmount},
                #{payMethod}, #{leftMsg}, #{extand}, #{isComment}, #{isDelete}, #{createdTime}, #{updatedTime})
    </insert>

    <select id="queryUserOrders" parameterType="map" resultMap="myOrdersVO">
        select od.id as orderId,
        od.created_time as createdTime,
        od.pay_method as payMethod,
        od.real_pay_amount as realPayAmount,
        od.post_amount as postAmount,
        os.order_status as orderStatus,
        od.is_comment as isComment
        from `order` od
        left join order_status os
        on od.id = os.order_id
        where od.user_id = #{paramsMap.userId}
        and od.is_delete = 0
        <if test="paramsMap.orderStatus != null">
            and os.order_status = #{paramsMap.orderStatus}
        </if>
        order by od.updated_time asc
    </select>

    <select id="getSubItems" parameterType="string" resultType="com.github.vo.MySubOrderItemVO">
        select oi.item_id        as itemId,
               oi.item_name      as itemName,
               oi.item_img       as itemImg,
               oi.item_spec_id   as itemSpecId,
               oi.item_spec_name as itemSpecName,
               oi.buy_counts     as buyCounts,
               oi.price          as price
        from order_item oi
        where oi.order_id = #{orderId}
    </select>

    <select id="queryMyOrder" parameterType="map" resultMap="BaseResultMap">
        select *
        from `order` od
        where od.id = #{paramsMap.id}
          and od.user_id = #{paramsMap.userId}
          and od.is_delete = 0
        limit 1
    </select>

    <update id="deleteOrder" parameterType="map">
        update `order` od
        set od.is_delete    = 1,
            od.updated_time = now()
        where od.id = #{paramsMap.id}
          and od.user_id = #{paramsMap.userId}
    </update>

    <update id="updateOrderIsCommentForYes" parameterType="string">
        update `order` od
        set od.is_comment = 1
        where od.id = #{orderId}
    </update>

    <select id="getMyOrderStatusCount" parameterType="map" resultType="int">
        select count(1)
        from `order` o
        left join
        order_status os
        on o.id = os.order_id
        where o.user_id = #{paramsMap.userId}
        and os.order_status = #{paramsMap.orderStatus}
        <if test="paramsMap.isComment != null">
            and o.is_comment = #{paramsMap.isComment}
        </if>
    </select>

    <select id="getMyOrderTrend" parameterType="map" resultType="com.github.pojo.OrderStatus">
        select os.order_id     as orderId,
               os.order_status as orderStatus,
               os.created_time as createdTime,
               os.pay_time     as payTime,
               os.deliver_time as deliverTime,
               os.success_time as successTime,
               os.close_time   as closeTime,
               os.comment_time as commentTime
        from `order` o
                 left join order_status os
                           on o.id = os.order_id
        where o.is_delete = 0
          and o.user_id = #{paramsMap.userId}
          and os.order_status in (20, 30, 40)
        order by os.order_id
            desc
    </select>
</mapper>